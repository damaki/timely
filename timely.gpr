with "config/timely_config.gpr";
project Timely is

   for Library_Name use "timely";
   for Library_Version use Project'Library_Name & ".so." & Timely_Config.Crate_Version;

   Timing_Dirs := ();
   case Timely_Config.Arch_Timer is
      when "x86_64" =>
         Timing_Dirs := ("src/arch/64", "src/arch/x86_64");
      when "aarch64" =>
         Timing_Dirs := ("src/arch/64", "src/arch/aarch64");
      when "armv7m_dwt" =>
         Timing_Dirs := ("src/arch/32", "src/arch/armv7m_dwt");
      when "cortexm_systick" =>
         Timing_Dirs := ("src/arch/24", "src/arch/cortexm_systick");
      when "external_64" =>
         Timing_Dirs := ("src/arch/64", "src/arch/external");
      when "external_32" =>
         Timing_Dirs := ("src/arch/32", "src/arch/external");
   end case;

   for Source_Dirs use ("src/", "config/") & Timing_Dirs;
   for Object_Dir use "obj/" & Timely_Config.Build_Profile;
   for Create_Missing_Dirs use "True";
   for Library_Dir use "lib";

   type Library_Type_Type is ("relocatable", "static", "static-pic");
   Library_Type : Library_Type_Type :=
     external ("TIMING_LEAKAGE_LIBRARY_TYPE", external ("LIBRARY_TYPE", "static"));
   for Library_Kind use Library_Type;

   package Compiler is
      for Default_Switches ("Ada") use Timely_Config.Ada_Compiler_Switches;
   end Compiler;

   package Binder is
      for Switches ("Ada") use ("-Es"); --  Symbolic traceback
   end Binder;

   package Install is
      for Artifacts (".") use ("share");
   end Install;

end Timely;
